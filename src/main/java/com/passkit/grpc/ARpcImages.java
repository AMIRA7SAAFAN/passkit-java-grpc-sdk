// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/core/a_rpc_images.proto

package com.passkit.grpc;

public final class ARpcImages {
  private ARpcImages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032io/core/a_rpc_images.proto\022\002io\032\034google" +
      "/api/annotations.proto\032\033google/protobuf/" +
      "empty.proto\032.protoc-gen-openapiv2/option" +
      "s/annotations.proto\032\036io/common/common_ob" +
      "jects.proto\032\032io/common/pagination.proto\032" +
      "\024io/image/image.proto\032\026io/common/filter." +
      "proto2\340\027\n\006Images\022\240\001\n\017setProfileImage\022\025.i" +
      "o.ProfileImageInput\032\026.google.protobuf.Em" +
      "pty\"^\202\323\344\223\002\023\"\016/image/profile:\001*\222AB\022\021Set p" +
      "rofile image\032-Set the profile image for " +
      "the logged in user.\022\224\001\n\017getProfileImage\022" +
      "\026.google.protobuf.Empty\032\007.io.Url\"`\202\323\344\223\002\020" +
      "\022\016/image/profile\222AG\022\021Get profile image\0322" +
      "Gets the profile image URL for the logge" +
      "d in user.\022o\n\014createImages\022\024.io.CreateIm" +
      "ageInput\032\014.io.ImageIds\";\202\323\344\223\002\014\"\007/images:" +
      "\001*\222A&\022\rCreate Images\032\025Creates image reco" +
      "rd.\022r\n\013updateImage\022\024.io.UpdateImageInput" +
      "\032\017.io.ImageRecord\"<\202\323\344\223\002\013\032\006/image:\001*\222A(\022" +
      "\014Update Image\032\030Updates an image record.\022" +
      "^\n\013getImageURL\022\006.io.Id\032\007.io.Url\">\202\323\344\223\002\r\022" +
      "\013/image/{id}\222A(\022\rGet Image URL\032\027Retrieve" +
      "s an image url.\022\361\001\n\020getStampImageURL\022\025.i" +
      "o.StampImageRequest\032\007.io.Url\"\274\001\202\323\344\223\002\034\022\032/" +
      "image/stamp/{id}/{status}\222A\226\001\022\023Get Stamp" +
      " Image URL\032;Retrieves a stamp image url " +
      "with the supplied stamp status.J\"\n\003403\022\033" +
      "\n\031User lacks authorization.J\036\n\003404\022\027\n\025Re" +
      "cord was not found.\022\232\001\n\024getLocalizedImag" +
      "eURL\022\027.io.LocalizedImageInput\032\007.io.Url\"`" +
      "\202\323\344\223\002\034\022\032/image/{id}/{languageCode}\222A;\022\027G" +
      "et Localized Image URL\032 Retrieves a loca" +
      "lized image URL.\022C\n\023getProfileImageById\022" +
      "\006.io.Id\032\007.io.Url\"\033\202\323\344\223\002\025\022\023/image/profile" +
      "/{id}\022v\n\016getImageBundle\022\006.io.Id\032\017.io.Ima" +
      "geBundle\"K\202\323\344\223\002\024\022\022/image/bundle/{id}\222A.\022" +
      "\020Get Image Bundle\032\032Retrieves an image bu" +
      "ndle.\022p\n\014getImageData\022\006.io.Id\032\017.io.Image" +
      "Record\"G\202\323\344\223\002\022\022\020/image/data/{id}\222A,\022\016Get" +
      " Image Data\032\032Retrieves an image record.\022" +
      "l\n\013deleteImage\022\006.io.Id\032\026.google.protobuf" +
      ".Empty\"=\202\323\344\223\002\r*\013/image/{id}\222A\'\022\014Delete I" +
      "mage\032\027Deletes an image record\022\241\001\n\024delete" +
      "LocalizedImage\022\027.io.LocalizedImageInput\032" +
      "\017.io.ImageRecord\"_\202\323\344\223\002\034*\032/image/{id}/{l" +
      "anguageCode}\222A:\022\026Delete Localized Image\032" +
      " Deletes a localized image record\022\247\001\n\033li" +
      "stImagesForUserDeprecated\022\016.io.Paginatio" +
      "n\032\017.io.ImageRecord\"e\202\323\344\223\002\016\022\014/images/user" +
      "\222AN\022\027Get All Images For User\0323Retrieves " +
      "all images stored under the user account" +
      ".0\001\022\242\001\n\021listImagesForUser\022\013.io.Filters\032\017" +
      ".io.ImageRecord\"m\202\323\344\223\002\026\"\021/images/user/li" +
      "st:\001*\222AN\022\027Get All Images For User\0323Retri" +
      "eves all images stored under the user ac" +
      "count.0\001\022\227\001\n\024listImagesDeprecated\022\016.io.P" +
      "agination\032\017.io.ImageRecord\"\\\202\323\344\223\002\t\022\007/ima" +
      "ges\222AJ\022\030Get All Available Images\032.Retrie" +
      "ves all images stored under the company." +
      "0\001\022\222\001\n\nlistImages\022\013.io.Filters\032\017.io.Imag" +
      "eRecord\"d\202\323\344\223\002\021\"\014/images/list:\001*\222AJ\022\030Get" +
      " All Available Images\032.Retrieves all ima" +
      "ges stored under the company.0\001\022\262\001\n\025coun" +
      "tImagesDeprecated\022\016.io.Pagination\032\t.io.C" +
      "ount\"~\202\323\344\223\002\017\022\r/images/count\222Af\022&Count Al" +
      "l Images Available to The User\032<Retrieve" +
      "s a count of images stored under the use" +
      "r\'s company.\022\251\001\n\013countImages\022\013.io.Filter" +
      "s\032\t.io.Count\"\201\001\202\323\344\223\002\022\"\r/images/count:\001*\222" +
      "Af\022&Count All Images Available to The Us" +
      "er\032<Retrieves a count of images stored u" +
      "nder the user\'s company.\022\371\001\n\034countImages" +
      "ForUserDeprecated\022\016.io.Pagination\032\t.io.C" +
      "ount\"\275\001\202\323\344\223\002\024\022\022/images/user/count\222A\237\001\022\"C" +
      "ount All Images Owned by The User\0325Retri" +
      "eves all images stored under the user\'s " +
      "account.J\"\n\003403\022\033\n\031User lacks authorizat" +
      "ion.J\036\n\003404\022\027\n\025Record was not found.\022\251\001\n" +
      "\022countImagesForUser\022\013.io.Filters\032\t.io.Co" +
      "unt\"{\202\323\344\223\002\027\"\022/images/user/count:\001*\222A[\022\"C" +
      "ount All Images Owned by The User\0325Retri" +
      "eves all images stored under the user\'s " +
      "account.B\344\006\n\020com.passkit.grpcZ$stash.pas" +
      "skit.com/io/model/sdk/go/io\252\002\014PassKit.Gr" +
      "pc\222A\231\006\022\324\001\n\022PassKit Images API\022CAPI for m" +
      "anaging image assets for Pass Templates " +
      "& Wallet Projects.\0328https://passkit.com/" +
      "legal/terms-of-subscription-service/\"?\n\017" +
      "PassKit Support\022\027https://docs.passkit.io" +
      "\032\023support@passkit.com*\001\0022\020application/js" +
      "on:\020application/jsonR9\n\003200\0222\n(Returned " +
      "when the request is successful.\022\006\n\004\232\002\001\007R" +
      "4\n\003400\022-\n+Returned when wrong user input" +
      " is provided.R0\n\003401\022)\n\'Returned when th" +
      "e user is unauthorized.RP\n\003403\022I\nGReturn" +
      "ed when the user does not have permissio" +
      "n to access the resource.R;\n\003404\0224\n*Retu" +
      "rned when the resource does not exist.\022\006" +
      "\n\004\232\002\001\007R<\n\003500\0225\n+Returned when there is " +
      "an unexpected error.\022\006\n\004\232\002\001\007RW\n\003503\022P\nNS" +
      "erver is unavailable. Back off for 250ms" +
      " and repeat request until successful.Z>\n" +
      "<\n\napiKeyAuth\022.\010\002\022\031JWT Authentication to" +
      "ken.\032\rAuthorization \002b\020\n\016\n\napiKeyAuth\022\000b" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          com.google.protobuf.EmptyProto.getDescriptor(),
          grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor(),
          com.passkit.grpc.CommonObjects.getDescriptor(),
          com.passkit.grpc.PaginationOuterClass.getDescriptor(),
          com.passkit.grpc.Image.getDescriptor(),
          com.passkit.grpc.Filter.getDescriptor(),
        });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Operation);
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Swagger);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    com.google.protobuf.EmptyProto.getDescriptor();
    grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor();
    com.passkit.grpc.CommonObjects.getDescriptor();
    com.passkit.grpc.PaginationOuterClass.getDescriptor();
    com.passkit.grpc.Image.getDescriptor();
    com.passkit.grpc.Filter.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
