// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/single_use_coupons/a_rpc.proto

package com.passkit.grpc.SingleUseCoupons;

public final class ARpc {
  private ARpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!io/single_use_coupons/a_rpc.proto\022\022sin" +
      "gle_use_coupons\032\033google/protobuf/empty.p" +
      "roto\032\034google/api/annotations.proto\032\036io/c" +
      "ommon/common_objects.proto\032\032io/common/pa" +
      "gination.proto\032\026io/common/filter.proto\032\031" +
      "io/common/reporting.proto\032$io/single_use" +
      "_coupons/campaign.proto\032!io/single_use_c" +
      "oupons/offer.proto\032\"io/single_use_coupon" +
      "s/coupon.proto\032,protoc-gen-swagger/optio" +
      "ns/annotations.proto2\246=\n\020SingleUseCoupon" +
      "s\022\300\001\n\024createCouponCampaign\022\".single_use_" +
      "coupons.CouponCampaign\032\006.io.Id\"|\202\323\344\223\002\037\"\032" +
      "/coupon/singleUse/campaign:\001*\222AT\n\020Coupon" +
      " Campaigns\022\026Create Coupon Campaign\032(Crea" +
      "tes a new Single Use Coupon Campaign\022\324\001\n" +
      "\024updateCouponCampaign\022\".single_use_coupo" +
      "ns.CouponCampaign\032\".single_use_coupons.C" +
      "ouponCampaign\"t\202\323\344\223\002\037\032\032/coupon/singleUse" +
      "/campaign:\001*\222AL\n\020Coupon Campaigns\022\026Updat" +
      "e Coupon Campaign\032 Updates an existing P" +
      "ass Project\022\264\001\n\021getCouponCampaign\022\006.io.I" +
      "d\032\".single_use_coupons.CouponCampaign\"s\202" +
      "\323\344\223\002!\022\037/coupon/singleUse/campaign/{id}\222A" +
      "I\n\020Coupon Campaigns\022\023Get Coupon Campaign" +
      "\032 Gets an existing Coupon Campaign\022\236\003\n\024d" +
      "eleteCouponCampaign\022\006.io.Id\032\026.google.pro" +
      "tobuf.Empty\"\345\002\202\323\344\223\002$*\037/coupon/singleUse/" +
      "campaign/{id}:\001*\222A\267\002\n\020Coupon Campaigns\022\026" +
      "Delete Coupon Campaign\032\212\002Deletes an exis" +
      "ting Coupon Campaign by id. Deleting a C" +
      "oupon Campaign results in the related of" +
      "fer being deleted, and all coupons being" +
      " invalidated in the customers Mobile Wal" +
      "let; rendering them unusable. This metho" +
      "d needs to be used with care, this is ir" +
      "reversible.\022\224\002\n\035listCouponCampaignsDepre" +
      "cated\022\016.io.Pagination\032\".single_use_coupo" +
      "ns.CouponCampaign\"\274\001\202\323\344\223\002\035\022\033/coupon/sing" +
      "leUse/campaigns\222A\225\001\n\020Coupon Campaigns\022\"L" +
      "ist Coupon Campaigns [DEPRECATED]\032][DEPR" +
      "ECATED: OR operator is not supported] Li" +
      "sts all Coupon Campaigns for the logged " +
      "in user.0\001\022\276\004\n\023listCouponCampaigns\022\013.io." +
      "Filters\032\".single_use_coupons.CouponCampa" +
      "ign\"\363\003\202\323\344\223\002%\" /coupon/singleUse/campaign" +
      "s/list:\001*\222A\304\003\n\020Coupon Campaigns\022\025List Co" +
      "upon Campaigns\032\230\003Lists all Coupon Campai" +
      "gns for the logged in user.\n\n<span style" +
      "=\"font-weight:bold\">About filter field n" +
      "ames, operators and sample payloads:</sp" +
      "an> <a target=\"_blank\" href=\"https://hel" +
      "p.passkit.com/en/articles/4130967-coupon" +
      "-protocol-filtering-listing-and-counting" +
      "-by-api#filter-campaigns\">https://help.p" +
      "asskit.com/en/articles/4130967-coupon-pr" +
      "otocol-filtering-listing-and-counting-by" +
      "-api#filter-campaigns</a>0\001\022\362\001\n\014getAnaly" +
      "tics\022\024.io.AnalyticsRequest\0323.single_use_" +
      "coupons.CouponCampaignAnalyticsResponse\"" +
      "\226\001\202\323\344\223\0020\022./coupon/singleUse/campaign/{cl" +
      "assId}/analytics\222A]\n\020Coupon Campaigns\022\035G" +
      "et Coupon Campaign Analytics\032*Retrieves " +
      "protocol specific analytics data\022\243\001\n\021cre" +
      "ateCouponOffer\022\037.single_use_coupons.Coup" +
      "onOffer\032\006.io.Id\"e\202\323\344\223\002\034\"\027/coupon/singleU" +
      "se/offer:\001*\222A@\n\rCoupon Offers\022\023Create Co" +
      "upon Offer\032\032Creates a new Coupon Offer\022\302" +
      "\001\n\021updateCouponOffer\022\037.single_use_coupon" +
      "s.CouponOffer\032\037.single_use_coupons.Coupo" +
      "nOffer\"k\202\323\344\223\002\034\032\027/coupon/singleUse/offer:" +
      "\001*\222AF\n\rCoupon Offers\022\023Update Coupon Offe" +
      "r\032 Updates an existing Coupon Offer\022\242\001\n\016" +
      "getCouponOffer\022\006.io.Id\032\037.single_use_coup" +
      "ons.CouponOffer\"g\202\323\344\223\002\036\022\034/coupon/singleU" +
      "se/offer/{id}\222A@\n\rCoupon Offers\022\020Get Cou" +
      "pon Offer\032\035Gets an existing Coupon Offer" +
      "\022\333\002\n\021deleteCouponOffer\022\006.io.Id\032\026.google." +
      "protobuf.Empty\"\245\002\202\323\344\223\002!*\034/coupon/singleU" +
      "se/offer/{id}:\001*\222A\372\001\n\rCoupon Offers\022\023Del" +
      "ete Coupon Offer\032\323\001Deletes an existing C" +
      "oupon Offer by id. Deleting a Coupon Off" +
      "er results in all coupons being invalida" +
      "ted in the customers Mobile Wallet; rend" +
      "ering them unusable. Needs to be used wi" +
      "th care, this is irreversible.\022\241\002\n\032listC" +
      "ouponOffersDeprecated\0225.single_use_coupo" +
      "ns.CouponOffersListRequestDeprecated\032\037.s" +
      "ingle_use_coupons.CouponOffer\"\250\001\202\323\344\223\002\032\022\030" +
      "/coupon/singleUse/offers\222A\204\001\n\rCoupon Off" +
      "ers\022\037List Coupon Offers [DEPRECATED]\032R[D" +
      "EPRECATED: OR operator is not supported]" +
      " Lists all Coupon Offers for a campaign." +
      "0\001\022\276\004\n\020listCouponOffers\022+.single_use_cou" +
      "pons.CouponOffersListRequest\032\037.single_us" +
      "e_coupons.CouponOffer\"\331\003\202\323\344\223\002\"\"\035/coupon/" +
      "singleUse/offers/list:\001*\222A\255\003\n\rCoupon Off" +
      "ers\022\022List Coupon Offers\032\207\003Lists all Coup" +
      "on Offers for a campaign.\n\n<span style=\"" +
      "font-weight:bold\">About filter field nam" +
      "es, operators and sample payloads:</span" +
      "> <a target=\"_blank\" href=\"https://help." +
      "passkit.com/en/articles/4130967-coupon-p" +
      "rotocol-filtering-listing-and-counting-b" +
      "y-api#filter-offers\">https://help.passki" +
      "t.com/en/articles/4130967-coupon-protoco" +
      "l-filtering-listing-and-counting-by-api#" +
      "filter-offers</a>0\001\022\217\001\n\014createCoupon\022\032.s" +
      "ingle_use_coupons.Coupon\032\006.io.Id\"[\202\323\344\223\002\035" +
      "\"\030/coupon/singleUse/coupon:\001*\222A5\n\007Coupon" +
      "s\022\rCreate Coupon\032\033Creates a new unique C" +
      "oupon\022\216\001\n\014updateCoupon\022\032.single_use_coup" +
      "ons.Coupon\032\006.io.Id\"Z\202\323\344\223\002\035\032\030/coupon/sing" +
      "leUse/coupon:\001*\222A4\n\007Coupons\022\rUpdate Coup" +
      "on\032\032Updates an existing Coupon\022\276\001\n\023strea" +
      "mCouponUpdates\022\032.single_use_coupons.Coup" +
      "on\032\006.io.Id\"\177\222A|\n\007Coupons\022\'Stream Coupon " +
      "Updates (gRPC SDKss only)\032HUpdates exist" +
      "ing Coupon records via stream. To be use" +
      "d for batch update.(\0010\001\022\353\002\n\014redeemCoupon" +
      "\022\032.single_use_coupons.Coupon\032\006.io.Id\"\266\002\202" +
      "\323\344\223\002$\032\037/coupon/singleUse/coupon/redeem:\001" +
      "*\222A\210\002\n\007Coupons\022\rRedeem Coupon\032\355\001Redeems " +
      "an existing Coupon. Use this endpoint wh" +
      "en you want to capture redemption data a" +
      "nd trigger the switch to the redemption " +
      "design of the coupon. The coupon cannot " +
      "be used again after calling this endpoin" +
      "t, and is marked as redeemed.\022\313\001\n\027stream" +
      "CouponRedemptions\022\032.single_use_coupons.C" +
      "oupon\032\006.io.Id\"\207\001\222A\203\001\n\007Coupons\022*Stream Co" +
      "upon Redemptions (gRPC SDKs only)\032LRedee" +
      "ms existing Coupon records via stream. T" +
      "o be used for batch redemption.(\0010\001\022\216\001\n\r" +
      "getCouponById\022\006.io.Id\032\032.single_use_coupo" +
      "ns.Coupon\"Y\202\323\344\223\002\037\022\035/coupon/singleUse/cou" +
      "pon/{id}\222A1\n\007Coupons\022\020Get Coupon by ID\032\024" +
      "Gets a Coupon record\022\364\001\n\025getCouponByExte" +
      "rnalId\022%.single_use_coupons.ExternalIdRe" +
      "quest\032\032.single_use_coupons.Coupon\"\227\001\202\323\344\223" +
      "\002E\022C/coupon/singleUse/coupon/externalId/" +
      "{couponCampaignId}/{externalId}\222AI\n\007Coup" +
      "ons\022\031Get Coupon by External ID\032#Gets a C" +
      "oupon record by External ID\022\302\002\n\nvoidCoup" +
      "on\022\032.single_use_coupons.Coupon\032\026.google." +
      "protobuf.Empty\"\377\001\202\323\344\223\002\035*\030/coupon/singleU" +
      "se/coupon:\001*\222A\330\001\n\007Coupons\022\013Void Coupon\032\277" +
      "\001Voids (deletes) an existing Coupon by I" +
      "D or External ID. Invalidates the coupon" +
      " in the customers Mobile Wallet; renderi" +
      "ng it useless. This method is irreversib" +
      "le and should be used with care.\022\270\002\n%lis" +
      "tCouponsByCouponCampaignDeprecated\022).sin" +
      "gle_use_coupons.ListRequestDeprecated\032\032." +
      "single_use_coupons.Coupon\"\305\001\202\323\344\223\002.\022,/cou" +
      "pon/singleUse/coupons/{couponCampaignId}" +
      "\222A\215\001\n\007Coupons\022\031List Coupons [DEPRECATED]" +
      "\032g[DEPRECATED: OR operator is not suppor" +
      "ted] List all coupons for a Coupon Campa" +
      "ign. Supports pagination.0\001\022\327\004\n\033listCoup" +
      "onsByCouponCampaign\022\037.single_use_coupons" +
      ".ListRequest\032\032.single_use_coupons.Coupon" +
      "\"\370\003\202\323\344\223\0026\"1/coupon/singleUse/coupons/lis" +
      "t/{couponCampaignId}:\001*\222A\270\003\n\007Coupons\022\014Li" +
      "st Coupons\032\236\003List all coupons for a Coup" +
      "on Campaign. Supports pagination.\n\n<span" +
      " style=\"font-weight:bold\">About filter f" +
      "ield names, operators and sample payload" +
      "s:</span> <a target=\"_blank\" href=\"https" +
      "://help.passkit.com/en/articles/4130967-" +
      "coupon-protocol-filtering-listing-and-co" +
      "unting-by-api#filter-coupons\">https://he" +
      "lp.passkit.com/en/articles/4130967-coupo" +
      "n-protocol-filtering-listing-and-countin" +
      "g-by-api#filter-coupons</a>0\001\022\230\002\n&countC" +
      "ouponsByCouponCampaignDeprecated\022).singl" +
      "e_use_coupons.ListRequestDeprecated\032\t.io" +
      ".Count\"\267\001\202\323\344\223\0024\0222/coupon/singleUse/coupo" +
      "ns/count/{couponCampaignId}\222Az\n\007Coupons\022" +
      "\032Count Coupons [DEPRECATED]\032S[DEPRECATED" +
      ": OR operator is not supported] Count al" +
      "l coupons for a Coupon Campaign.\022\263\004\n\034cou" +
      "ntCouponsByCouponCampaign\022\037.single_use_c" +
      "oupons.ListRequest\032\t.io.Count\"\346\003\202\323\344\223\0027\"2" +
      "/coupon/singleUse/coupons/count/{couponC" +
      "ampaignId}:\001*\222A\245\003\n\007Coupons\022\rCount Coupon" +
      "s\032\212\003Count all coupons for a Coupon Campa" +
      "ign.\n\n<span style=\"font-weight:bold\">Abo" +
      "ut filter field names, operators and sam" +
      "ple payloads:</span> <a target=\"_blank\" " +
      "href=\"https://help.passkit.com/en/articl" +
      "es/4130967-coupon-protocol-filtering-lis" +
      "ting-and-counting-by-api#filter-coupons\"" +
      ">https://help.passkit.com/en/articles/41" +
      "30967-coupon-protocol-filtering-listing-" +
      "and-counting-by-api#filter-coupons</a>\022\271" +
      "\001\n\022copyCouponCampaign\022\'.single_use_coupo" +
      "ns.CampaignCopyRequest\032\006.io.Id\"r\202\323\344\223\002$\"\037" +
      "/coupon/singleUse/campaign/copy:\001*\222AE\n\020C" +
      "oupon Campaigns\022\rCopy Campaign\032\"Copies a" +
      "n existing campaign record\022\360\001\n\026getMetaKe" +
      "ysForCampaign\022\006.io.Id\032\013.io.Strings\"\300\001\202\323\344" +
      "\223\002&\022$/coupon/singleUse/campaign/meta/{id" +
      "}\222A\220\001\n\020Coupon Campaigns\022\034Get Meta Keys f" +
      "or a Campaign\032^Returns a list of distinc" +
      "t meta field keys. Can be used for build" +
      "ing filters / table headings.B\226\007\n!com.pa" +
      "sskit.grpc.SingleUseCouponsZ7stash.passk" +
      "it.com/io/model/sdk/go/io/single_use_cou" +
      "pons\252\002\022PKSingleUseCoupons\222A\241\006\022\276\002\n\035PassKi" +
      "t Single Use Coupon API\022\234\001This protocol " +
      "is suit for cases where the user require" +
      "s a clean and simple single use coupon f" +
      "or short term coupon campaigns in Apple " +
      "Wallet and Google Pay.\0328https://passkit." +
      "com/legal/terms-of-subscription-service/" +
      "\"?\n\017PassKit Support\022\027https://docs.passki" +
      "t.io\032\023support@passkit.com2\0031.0*\001\0022\020appli" +
      "cation/json:\020application/jsonR9\n\003200\0222\n(" +
      "Returned when the request is successful." +
      "\022\006\n\004\232\002\001\007RP\n\003403\022I\nGReturned when the use" +
      "r does not have permission to access the" +
      " resource.R;\n\003404\0224\n*Returned when the r" +
      "esource does not exist.\022\006\n\004\232\002\001\007R<\n\003500\0225" +
      "\n+Returned when there is an unexpected e" +
      "rror.\022\006\n\004\232\002\001\007R]\n\003503\022V\nTReturned when th" +
      "e user is being throttled. Back off for " +
      "a few ms and then try again.Z>\n<\n\napiKey" +
      "Auth\022.\010\002\022\031JWT Authentication token.\032\rAut" +
      "horization \002b\020\n\016\n\napiKeyAuth\022\000b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.EmptyProto.getDescriptor(),
          com.google.api.AnnotationsProto.getDescriptor(),
          com.passkit.grpc.CommonObjects.getDescriptor(),
          com.passkit.grpc.PaginationOuterClass.getDescriptor(),
          com.passkit.grpc.Filter.getDescriptor(),
          com.passkit.grpc.Reporting.getDescriptor(),
          com.passkit.grpc.SingleUseCoupons.Campaign.getDescriptor(),
          com.passkit.grpc.SingleUseCoupons.Offer.getDescriptor(),
          com.passkit.grpc.SingleUseCoupons.CouponOuterClass.getDescriptor(),
          grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor(),
        });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Operation);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Swagger);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.EmptyProto.getDescriptor();
    com.google.api.AnnotationsProto.getDescriptor();
    com.passkit.grpc.CommonObjects.getDescriptor();
    com.passkit.grpc.PaginationOuterClass.getDescriptor();
    com.passkit.grpc.Filter.getDescriptor();
    com.passkit.grpc.Reporting.getDescriptor();
    com.passkit.grpc.SingleUseCoupons.Campaign.getDescriptor();
    com.passkit.grpc.SingleUseCoupons.Offer.getDescriptor();
    com.passkit.grpc.SingleUseCoupons.CouponOuterClass.getDescriptor();
    grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
