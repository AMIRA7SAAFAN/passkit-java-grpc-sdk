// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/single_use_coupons/a_rpc.proto

package com.passkit.grpc.SingleUseCoupons;

public final class ARpc {
  private ARpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!io/single_use_coupons/a_rpc.proto\022\022sin" +
      "gle_use_coupons\032\033google/protobuf/empty.p" +
      "roto\032\034google/api/annotations.proto\032\036io/c" +
      "ommon/common_objects.proto\032\032io/common/pa" +
      "gination.proto\032\026io/common/filter.proto\032\031" +
      "io/common/reporting.proto\032\030io/common/per" +
      "sonal.proto\032$io/single_use_coupons/campa" +
      "ign.proto\032!io/single_use_coupons/offer.p" +
      "roto\032\"io/single_use_coupons/coupon.proto" +
      "\032.protoc-gen-openapiv2/options/annotatio" +
      "ns.proto2\353@\n\020SingleUseCoupons\022\300\001\n\024create" +
      "CouponCampaign\022\".single_use_coupons.Coup" +
      "onCampaign\032\006.io.Id\"|\202\323\344\223\002\037\"\032/coupon/sing" +
      "leUse/campaign:\001*\222AT\n\020Coupon Campaigns\022\026" +
      "Create Coupon Campaign\032(Creates a new Si" +
      "ngle Use Coupon Campaign\022\324\001\n\024updateCoupo" +
      "nCampaign\022\".single_use_coupons.CouponCam" +
      "paign\032\".single_use_coupons.CouponCampaig" +
      "n\"t\202\323\344\223\002\037\032\032/coupon/singleUse/campaign:\001*" +
      "\222AL\n\020Coupon Campaigns\022\026Update Coupon Cam" +
      "paign\032 Updates an existing Pass Project\022" +
      "\264\001\n\021getCouponCampaign\022\006.io.Id\032\".single_u" +
      "se_coupons.CouponCampaign\"s\202\323\344\223\002!\022\037/coup" +
      "on/singleUse/campaign/{id}\222AI\n\020Coupon Ca" +
      "mpaigns\022\023Get Coupon Campaign\032 Gets an ex" +
      "isting Coupon Campaign\022\236\003\n\024deleteCouponC" +
      "ampaign\022\006.io.Id\032\026.google.protobuf.Empty\"" +
      "\345\002\202\323\344\223\002$*\037/coupon/singleUse/campaign/{id" +
      "}:\001*\222A\267\002\n\020Coupon Campaigns\022\026Delete Coupo" +
      "n Campaign\032\212\002Deletes an existing Coupon " +
      "Campaign by id. Deleting a Coupon Campai" +
      "gn results in the related offer being de" +
      "leted, and all coupons being invalidated" +
      " in the customers Mobile Wallet; renderi" +
      "ng them unusable. This method needs to b" +
      "e used with care, this is irreversible.\022" +
      "\224\002\n\035listCouponCampaignsDeprecated\022\016.io.P" +
      "agination\032\".single_use_coupons.CouponCam" +
      "paign\"\274\001\202\323\344\223\002\035\022\033/coupon/singleUse/campai" +
      "gns\222A\225\001\n\020Coupon Campaigns\022\"List Coupon C" +
      "ampaigns [DEPRECATED]\032][DEPRECATED: OR o" +
      "perator is not supported] Lists all Coup" +
      "on Campaigns for the logged in user.0\001\022\276" +
      "\004\n\023listCouponCampaigns\022\013.io.Filters\032\".si" +
      "ngle_use_coupons.CouponCampaign\"\363\003\202\323\344\223\002%" +
      "\" /coupon/singleUse/campaigns/list:\001*\222A\304" +
      "\003\n\020Coupon Campaigns\022\025List Coupon Campaig" +
      "ns\032\230\003Lists all Coupon Campaigns for the " +
      "logged in user.\n\n<span style=\"font-weigh" +
      "t:bold\">About filter field names, operat" +
      "ors and sample payloads:</span> <a targe" +
      "t=\"_blank\" href=\"https://help.passkit.co" +
      "m/en/articles/4130967-coupon-protocol-fi" +
      "ltering-listing-and-counting-by-api#filt" +
      "er-campaigns\">https://help.passkit.com/e" +
      "n/articles/4130967-coupon-protocol-filte" +
      "ring-listing-and-counting-by-api#filter-" +
      "campaigns</a>0\001\022\362\001\n\014getAnalytics\022\024.io.An" +
      "alyticsRequest\0323.single_use_coupons.Coup" +
      "onCampaignAnalyticsResponse\"\226\001\202\323\344\223\0020\022./c" +
      "oupon/singleUse/campaign/{classId}/analy" +
      "tics\222A]\n\020Coupon Campaigns\022\035Get Coupon Ca" +
      "mpaign Analytics\032*Retrieves protocol spe" +
      "cific analytics data\022\243\001\n\021createCouponOff" +
      "er\022\037.single_use_coupons.CouponOffer\032\006.io" +
      ".Id\"e\202\323\344\223\002\034\"\027/coupon/singleUse/offer:\001*\222" +
      "A@\n\rCoupon Offers\022\023Create Coupon Offer\032\032" +
      "Creates a new Coupon Offer\022\302\001\n\021updateCou" +
      "ponOffer\022\037.single_use_coupons.CouponOffe" +
      "r\032\037.single_use_coupons.CouponOffer\"k\202\323\344\223" +
      "\002\034\032\027/coupon/singleUse/offer:\001*\222AF\n\rCoupo" +
      "n Offers\022\023Update Coupon Offer\032 Updates a" +
      "n existing Coupon Offer\022\242\001\n\016getCouponOff" +
      "er\022\006.io.Id\032\037.single_use_coupons.CouponOf" +
      "fer\"g\202\323\344\223\002\036\022\034/coupon/singleUse/offer/{id" +
      "}\222A@\n\rCoupon Offers\022\020Get Coupon Offer\032\035G" +
      "ets an existing Coupon Offer\022\333\002\n\021deleteC" +
      "ouponOffer\022\006.io.Id\032\026.google.protobuf.Emp" +
      "ty\"\245\002\202\323\344\223\002!*\034/coupon/singleUse/offer/{id" +
      "}:\001*\222A\372\001\n\rCoupon Offers\022\023Delete Coupon O" +
      "ffer\032\323\001Deletes an existing Coupon Offer " +
      "by id. Deleting a Coupon Offer results i" +
      "n all coupons being invalidated in the c" +
      "ustomers Mobile Wallet; rendering them u" +
      "nusable. Needs to be used with care, thi" +
      "s is irreversible.\022\241\002\n\032listCouponOffersD" +
      "eprecated\0225.single_use_coupons.CouponOff" +
      "ersListRequestDeprecated\032\037.single_use_co" +
      "upons.CouponOffer\"\250\001\202\323\344\223\002\032\022\030/coupon/sing" +
      "leUse/offers\222A\204\001\n\rCoupon Offers\022\037List Co" +
      "upon Offers [DEPRECATED]\032R[DEPRECATED: O" +
      "R operator is not supported] Lists all C" +
      "oupon Offers for a campaign.0\001\022\276\004\n\020listC" +
      "ouponOffers\022+.single_use_coupons.CouponO" +
      "ffersListRequest\032\037.single_use_coupons.Co" +
      "uponOffer\"\331\003\202\323\344\223\002\"\"\035/coupon/singleUse/of" +
      "fers/list:\001*\222A\255\003\n\rCoupon Offers\022\022List Co" +
      "upon Offers\032\207\003Lists all Coupon Offers fo" +
      "r a campaign.\n\n<span style=\"font-weight:" +
      "bold\">About filter field names, operator" +
      "s and sample payloads:</span> <a target=" +
      "\"_blank\" href=\"https://help.passkit.com/" +
      "en/articles/4130967-coupon-protocol-filt" +
      "ering-listing-and-counting-by-api#filter" +
      "-offers\">https://help.passkit.com/en/art" +
      "icles/4130967-coupon-protocol-filtering-" +
      "listing-and-counting-by-api#filter-offer" +
      "s</a>0\001\022\217\001\n\014createCoupon\022\032.single_use_co" +
      "upons.Coupon\032\006.io.Id\"[\202\323\344\223\002\035\"\030/coupon/si" +
      "ngleUse/coupon:\001*\222A5\n\007Coupons\022\rCreate Co" +
      "upon\032\033Creates a new unique Coupon\022\216\001\n\014up" +
      "dateCoupon\022\032.single_use_coupons.Coupon\032\006" +
      ".io.Id\"Z\202\323\344\223\002\035\032\030/coupon/singleUse/coupon" +
      ":\001*\222A4\n\007Coupons\022\rUpdate Coupon\032\032Updates " +
      "an existing Coupon\022\276\001\n\023streamCouponUpdat" +
      "es\022\032.single_use_coupons.Coupon\032\006.io.Id\"\177" +
      "\222A|\n\007Coupons\022\'Stream Coupon Updates (gRP" +
      "C SDKss only)\032HUpdates existing Coupon r" +
      "ecords via stream. To be used for batch " +
      "update.(\0010\001\022\353\002\n\014redeemCoupon\022\032.single_us" +
      "e_coupons.Coupon\032\006.io.Id\"\266\002\202\323\344\223\002$\032\037/coup" +
      "on/singleUse/coupon/redeem:\001*\222A\210\002\n\007Coupo" +
      "ns\022\rRedeem Coupon\032\355\001Redeems an existing " +
      "Coupon. Use this endpoint when you want " +
      "to capture redemption data and trigger t" +
      "he switch to the redemption design of th" +
      "e coupon. The coupon cannot be used agai" +
      "n after calling this endpoint, and is ma" +
      "rked as redeemed.\022\213\002\n\026updateCouponExtern" +
      "alId\022..single_use_coupons.CouponNewExter" +
      "nalIdRequest\032\006.io.Id\"\270\001\202\323\344\223\002(\032#/coupon/s" +
      "ingleUse/coupon/externalId:\001*\222A\206\001\n\007Coupo" +
      "ns\022\031Update Coupon External Id\032`Updates a" +
      "n external id of an existing coupon. Ext" +
      "enal id needs to be unique within the ca" +
      "mpaign.\022\313\001\n\027streamCouponRedemptions\022\032.si" +
      "ngle_use_coupons.Coupon\032\006.io.Id\"\207\001\222A\203\001\n\007" +
      "Coupons\022*Stream Coupon Redemptions (gRPC" +
      " SDKs only)\032LRedeems existing Coupon rec" +
      "ords via stream. To be used for batch re" +
      "demption.(\0010\001\022\216\001\n\rgetCouponById\022\006.io.Id\032" +
      "\032.single_use_coupons.Coupon\"Y\202\323\344\223\002\037\022\035/co" +
      "upon/singleUse/coupon/{id}\222A1\n\007Coupons\022\020" +
      "Get Coupon by ID\032\024Gets a Coupon record\022\364" +
      "\001\n\025getCouponByExternalId\022%.single_use_co" +
      "upons.ExternalIdRequest\032\032.single_use_cou" +
      "pons.Coupon\"\227\001\202\323\344\223\002E\022C/coupon/singleUse/" +
      "coupon/externalId/{couponCampaignId}/{ex" +
      "ternalId}\222AI\n\007Coupons\022\031Get Coupon by Ext" +
      "ernal ID\032#Gets a Coupon record by Extern" +
      "al ID\022\302\002\n\nvoidCoupon\022\032.single_use_coupon" +
      "s.Coupon\032\026.google.protobuf.Empty\"\377\001\202\323\344\223\002" +
      "\035*\030/coupon/singleUse/coupon:\001*\222A\330\001\n\007Coup" +
      "ons\022\013Void Coupon\032\277\001Voids (deletes) an ex" +
      "isting Coupon by ID or External ID. Inva" +
      "lidates the coupon in the customers Mobi" +
      "le Wallet; rendering it useless. This me" +
      "thod is irreversible and should be used " +
      "with care.\022\270\002\n%listCouponsByCouponCampai" +
      "gnDeprecated\022).single_use_coupons.ListRe" +
      "questDeprecated\032\032.single_use_coupons.Cou" +
      "pon\"\305\001\202\323\344\223\002.\022,/coupon/singleUse/coupons/" +
      "{couponCampaignId}\222A\215\001\n\007Coupons\022\031List Co" +
      "upons [DEPRECATED]\032g[DEPRECATED: OR oper" +
      "ator is not supported] List all coupons " +
      "for a Coupon Campaign. Supports paginati" +
      "on.0\001\022\327\004\n\033listCouponsByCouponCampaign\022\037." +
      "single_use_coupons.ListRequest\032\032.single_" +
      "use_coupons.Coupon\"\370\003\202\323\344\223\0026\"1/coupon/sin" +
      "gleUse/coupons/list/{couponCampaignId}:\001" +
      "*\222A\270\003\n\007Coupons\022\014List Coupons\032\236\003List all " +
      "coupons for a Coupon Campaign. Supports " +
      "pagination.\n\n<span style=\"font-weight:bo" +
      "ld\">About filter field names, operators " +
      "and sample payloads:</span> <a target=\"_" +
      "blank\" href=\"https://help.passkit.com/en" +
      "/articles/4130967-coupon-protocol-filter" +
      "ing-listing-and-counting-by-api#filter-c" +
      "oupons\">https://help.passkit.com/en/arti" +
      "cles/4130967-coupon-protocol-filtering-l" +
      "isting-and-counting-by-api#filter-coupon" +
      "s</a>0\001\022\230\002\n&countCouponsByCouponCampaign" +
      "Deprecated\022).single_use_coupons.ListRequ" +
      "estDeprecated\032\t.io.Count\"\267\001\202\323\344\223\0024\0222/coup" +
      "on/singleUse/coupons/count/{couponCampai" +
      "gnId}\222Az\n\007Coupons\022\032Count Coupons [DEPREC" +
      "ATED]\032S[DEPRECATED: OR operator is not s" +
      "upported] Count all coupons for a Coupon" +
      " Campaign.\022\263\004\n\034countCouponsByCouponCampa" +
      "ign\022\037.single_use_coupons.ListRequest\032\t.i" +
      "o.Count\"\346\003\202\323\344\223\0027\"2/coupon/singleUse/coup" +
      "ons/count/{couponCampaignId}:\001*\222A\245\003\n\007Cou" +
      "pons\022\rCount Coupons\032\212\003Count all coupons " +
      "for a Coupon Campaign.\n\n<span style=\"fon" +
      "t-weight:bold\">About filter field names," +
      " operators and sample payloads:</span> <" +
      "a target=\"_blank\" href=\"https://help.pas" +
      "skit.com/en/articles/4130967-coupon-prot" +
      "ocol-filtering-listing-and-counting-by-a" +
      "pi#filter-coupons\">https://help.passkit." +
      "com/en/articles/4130967-coupon-protocol-" +
      "filtering-listing-and-counting-by-api#fi" +
      "lter-coupons</a>\022\264\001\n\013patchPerson\022\021.io.Pe" +
      "rsonRequest\032\006.io.Id\"\211\001\202\323\344\223\002$2\037/coupon/si" +
      "ngleUse/coupon/person:\001*\222A\\\n\007Coupons\022\033Up" +
      "date Personal Information\0324Updates perso" +
      "nal information of a coupon pass holder\022" +
      "\271\001\n\022copyCouponCampaign\022\'.single_use_coup" +
      "ons.CampaignCopyRequest\032\006.io.Id\"r\202\323\344\223\002$\"" +
      "\037/coupon/singleUse/campaign/copy:\001*\222AE\n\020" +
      "Coupon Campaigns\022\rCopy Campaign\032\"Copies " +
      "an existing campaign record\022\360\001\n\026getMetaK" +
      "eysForCampaign\022\006.io.Id\032\013.io.Strings\"\300\001\202\323" +
      "\344\223\002&\022$/coupon/singleUse/campaign/meta/{i" +
      "d}\222A\220\001\n\020Coupon Campaigns\022\034Get Meta Keys " +
      "for a Campaign\032^Returns a list of distin" +
      "ct meta field keys. Can be used for buil" +
      "ding filters / table headings.B\203\010\n!com.p" +
      "asskit.grpc.SingleUseCouponsZ7stash.pass" +
      "kit.com/io/model/sdk/go/io/single_use_co" +
      "upons\252\002\035PassKit.Grpc.SingleUseCoupons\222A\203" +
      "\007\022\276\002\n\035PassKit Single Use Coupon API\022\234\001Th" +
      "is protocol is suit for cases where the " +
      "user requires a clean and simple single " +
      "use coupon for short term coupon campaig" +
      "ns in Apple Wallet and Google Pay.\0328http" +
      "s://passkit.com/legal/terms-of-subscript" +
      "ion-service/\"?\n\017PassKit Support\022\027https:/" +
      "/docs.passkit.io\032\023support@passkit.com2\0031" +
      ".0*\001\0022\020application/json:\020application/jso" +
      "nR9\n\003200\0222\n(Returned when the request is" +
      " successful.\022\006\n\004\232\002\001\007R4\n\003400\022-\n+Returned " +
      "when wrong user input is provided.R0\n\00340" +
      "1\022)\n\'Returned when the user is unauthori" +
      "zed.RP\n\003403\022I\nGReturned when the user do" +
      "es not have permission to access the res" +
      "ource.R;\n\003404\0224\n*Returned when the resou" +
      "rce does not exist.\022\006\n\004\232\002\001\007R<\n\003500\0225\n+Re" +
      "turned when there is an unexpected error" +
      ".\022\006\n\004\232\002\001\007RW\n\003503\022P\nNServer is unavailabl" +
      "e. Back off for 250ms and repeat request" +
      " until successful.Z>\n<\n\napiKeyAuth\022.\010\002\022\031" +
      "JWT Authentication token.\032\rAuthorization" +
      " \002b\020\n\016\n\napiKeyAuth\022\000b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.EmptyProto.getDescriptor(),
          com.google.api.AnnotationsProto.getDescriptor(),
          com.passkit.grpc.CommonObjects.getDescriptor(),
          com.passkit.grpc.PaginationOuterClass.getDescriptor(),
          com.passkit.grpc.Filter.getDescriptor(),
          com.passkit.grpc.Reporting.getDescriptor(),
          com.passkit.grpc.Personal.getDescriptor(),
          com.passkit.grpc.SingleUseCoupons.Campaign.getDescriptor(),
          com.passkit.grpc.SingleUseCoupons.Offer.getDescriptor(),
          com.passkit.grpc.SingleUseCoupons.CouponOuterClass.getDescriptor(),
          grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor(),
        });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Operation);
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Swagger);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.EmptyProto.getDescriptor();
    com.google.api.AnnotationsProto.getDescriptor();
    com.passkit.grpc.CommonObjects.getDescriptor();
    com.passkit.grpc.PaginationOuterClass.getDescriptor();
    com.passkit.grpc.Filter.getDescriptor();
    com.passkit.grpc.Reporting.getDescriptor();
    com.passkit.grpc.Personal.getDescriptor();
    com.passkit.grpc.SingleUseCoupons.Campaign.getDescriptor();
    com.passkit.grpc.SingleUseCoupons.Offer.getDescriptor();
    com.passkit.grpc.SingleUseCoupons.CouponOuterClass.getDescriptor();
    grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
